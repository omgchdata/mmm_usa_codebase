plotly::ggplotly(
df_viant_week %>%
ggplot(aes(week, athena_taggings, color = browser)) +
geom_line() +
labs(title = "viant online actions Trend by Browser") +
theme_minimal()
)
write_csv(df_viant_week, "Projects/Nissan/KBA/viant_onlineactivities.csv")
head(df_viant_week)
head(DFevt)
write_csv(DFevt, "Projects/Nissan/KBA/google_onlineactivities.csv")
plotly::ggplotly(
df_viant_week %>%
ggplot(aes(week, athena_taggings, color = browser)) +
geom_line() +
labs(title = "viant online actions Trend by Browser") +
theme_minimal()
)
DFevt
plotly::ggplotly(
DF %>%
ggplot(aes(dweek, events, color = Browser_Platform)) +
geom_line() +
labs(title = "Events Trend by Browser") +
theme_minimal()
)
plotly::ggplotly(
df_viant_week %>%
ggplot(aes(week, athena_taggings, color = browser)) +
geom_line() +
labs(title = "viant online actions Trend by Browser") +
theme_minimal()
)
plotly::ggplotly(
DF %>%
ggplot(aes(dweek, events, color = Browser_Platform)) +
geom_line() +
labs(title = "Events Trend by Browser") +
theme_minimal()
)
plotly::ggplotly(
df_viant_week %>%
ggplot(aes(week, athena_taggings, color = browser)) +
geom_line() +
labs(title = "viant online actions Trend by Browser") +
theme_minimal()
)
q()
q()
needs(car, lmtest, tidyverse, lubridate, stringr, onls)
# if (Sys.info()['sysname'] == "Darwin") {server <- "/Volumes"} else {server <- "//nyccentral"}
if (Sys.info()['sysname'] == "Darwin") {server <- "/Volumes"} else {server <- "//10.5.8.163"}
code_dir <- "/Annalect/BrandScience/msmp/R/"
source(paste(server, code_dir, "unnestr2.0.R", sep = ""))
source(paste(server, code_dir, "monthly.R", sep = ""))
source(paste(server, code_dir, "decomp_summary.R", sep = ""))
source(paste(server, code_dir, "contributions.R", sep = ""))
source(paste(server, code_dir, "DueToChart.R", sep = ""))
code_dir
if (Sys.info()['sysname'] == "Darwin") {server <- "/Volumes"} else {server <- "//nyccentral"}
code_dir <- "/Annalect/BrandScience/msmp/R/"
source(paste(server, code_dir, "unnestr2.0.R", sep = ""))
source(paste(server, code_dir, "monthly.R", sep = ""))
source(paste(server, code_dir, "decomp_summary.R", sep = ""))
source(paste(server, code_dir, "contributions.R", sep = ""))
source(paste(server, code_dir, "DueToChart.R", sep = ""))
source(paste(server, code_dir, "abc.R", sep = ""))
source(paste(server, code_dir, "abc_onls.R", sep = ""))
source(paste(server, code_dir, "fitABC_DF.R", sep = ""))
source(paste(server, code_dir, "unnestr2.0.R", sep = ""))
source(paste(server, code_dir, "monthly.R", sep = ""))
source(paste(server, code_dir, "decomp_summary.R", sep = ""))
source(paste(server, code_dir, "contributions.R", sep = ""))
source(paste(server, code_dir, "DueToChart.R", sep = ""))
source(paste(server, code_dir, "abc.R", sep = ""))
source(paste(server, code_dir, "abc_onls.R", sep = ""))
source(paste(server, code_dir, "fitABC_DF.R", sep = ""))
ProjectName <-  "US_offtrade_All"
OutDir <- "output"
RootDirectory <- paste(server, "/Annalect/BrandScience/Projects/Bacardi/MMM/Model_PhaseIII/US Grey Goose/", sep = "")
ProjectDirectory <- paste(RootDirectory, ProjectName, "/", sep="")
##### UNNESTING SECTION 1: LOADING MODELS #####
## Load in 4 different environments (one for each model). They will each contain the .Rdata model object within each folder
offtrade <- load_nest(submodel_name = ProjectName, root_dir = RootDirectory)
#imagery <- load_nest(submodel_name = "UK_GG_Imagery", root_dir = RootDirectory)
desire <- load_nest(submodel_name = "US_GreyGoose_Imagery", root_dir = RootDirectory)
sentiment <- load_nest(submodel_name = "US_GreyGoose_sentiment", root_dir = RootDirectory)
familiarity <- load_nest(submodel_name = "US_GreyGoose_Familiarity", root_dir = RootDirectory)
# Convert to monthly and filter to relevant dates (Note Ontrade sales model is already monthly)
offtrade$mod_obj$Decomposition <- offtrade$mod_obj$Decomposition %>%
filter(Week >= "2016-01-04" & Week <= "2018-12-24")
# This step is optional but can help with getting contributions by year for all models for the sunburst chart.
nested_offtrade_cont <- contributions(offtrade$mod_obj,  "2018-01-01", "2018-12-24") %>%
mutate(Model = "Nested_Offtrade")
nested_offtrade_cont_fy17 <- contributions(offtrade$mod_obj, "2017-01-02", "2017-12-25") %>%
mutate(Model = "Nested_Offtrade")
# Convert to monthly and filter to relevant dates
desire$mod_obj$Decomposition <- desire$mod_obj$Decomposition %>%
filter(Week >= "2016-01-04" & Week <= "2018-12-24")
# This step is optional but can help with getting contributions by year for all models for the sunburst chart.
desire_cont <- contributions(desire$mod_obj, "2018-01-01", "2018-12-24") %>%
mutate(Model = "Desire")
desire_cont_fy17 <- contributions(desire$mod_obj,  "2017-01-02", "2017-12-25") %>%
mutate(Model = "Desire")
# Convert to monthly and filter to relevant dates
sentiment$mod_obj$Decomposition <- sentiment$mod_obj$Decomposition %>%
filter(Week >= "2016-01-04" & Week <= "2018-12-24")
# This step is optional but can help with getting contributions by year for all models for the sunburst chart.
sentiment_cont <- contributions(sentiment$mod_obj,  "2018-01-01", "2018-12-24") %>%
mutate(Model = "Sentiment")
sentiment_cont_fy17 <- contributions(sentiment$mod_obj,"2017-01-02", "2017-12-25") %>%
mutate(Model = "Sentiment")
# Convert to monthly and filter to relevant dates
familiarity$mod_obj$Decomposition <- familiarity$mod_obj$Decomposition %>%
filter(Week >= "2016-01-04" & Week <= "2018-12-24")
# This step is optional but can help with getting contributions by year for all models for the sunburst chart.
familiarity_cont <- contributions(familiarity$mod_obj, "2018-01-01", "2018-12-24") %>%
mutate(Model = "Familiarity")
familiarity_cont_fy17 <- contributions(familiarity$mod_obj,"2017-01-02", "2017-12-25") %>%
mutate(Model = "Familiarity")
##### UNNESTING SECTION 3: UNNEST #####
## For parent models, I like to get a total sum of every contribution column. The reason being is this will serve as a QA number every time we unnest. This number
## should not change once all submodels are unnested
offtrade_sum <- sum(offtrade$mod_obj$Decomposition[-1])
desire_sum <- sum(desire$mod_obj$Decomposition[-1])
# Unnest Familiarity into desire and then do a quick QA to make sure desire's contribution total is unchanged (Line 84 should return a TRUE)
desire$mod_obj <- unnestr(child = familiarity$mod_obj, parent = desire$mod_obj, submodel_number = 1)
sum(desire$mod_obj$Decomposition[-1]) == desire_sum
desire$mod_obj$Decomposition
View(unnestr)
mod_obj
obj
obj = desire$mod_obj
# Unnest Sentiment into desire and then do a quick QA to make sure desire's contribution total is unchanged (Line 88 should return a TRUE)
desire$mod_obj <- unnestr(child = sentiment$mod_obj, parent = desire$mod_obj, submodel_number = 2)
desire$mod_obj$Decomposition
sum(desire$mod_obj$Decomposition[-1]) == desire_sum
# Unnest desire into Sales - offtrade and then do a quick QA to make sure offtrade's contribution total is unchanged (Line 93 should return a TRUE)
offtrade$mod_obj <- unnestr(child = desire$mod_obj, parent = offtrade$mod_obj, submodel_number = 1)
sum(offtrade$mod_obj$Decomposition[-1]) == offtrade_sum
## After we unnest, there will be certain cases where we have multiple column in the decomp for the same variable (e.g. Display Impressions and Display CLicks)
## This is totally normal and stems from the fact that in different models, different variable for the same channel may have been used
## All we need to do is combine the contributions across the same channel into one variable and then delete the others.
## I always do a quick QA after each step to make sure things were aggregated correctly
#if(0){
# Combine OLV and QA
offtrade$mod_obj$Decomposition$d_US_GreyGoose_NonBrandedSearch_Clicks_t <- offtrade$mod_obj$Decomposition$d_US_GreyGoose_NonBrandedSearch_Clicks_t +
offtrade$mod_obj$Decomposition$d_US_GreyGoose_DigitalVideo_Impressions_t
q()
norm_density <- function(mean, sd) {
x <- seq(mean-10*sd, mean+10*sd)
res <- data.frame(x, dnorm(x, mean, sd))
names(res) <- c("x", "dnorm")
return(res)
}
plot(norm_density(1, 1))
plot(norm_density(1, 1), type="l")
x <- seq(1-10*sd, 1+10*sd)
x <- seq(1-10, 1+10)
x
mean+10*sd - mean-10*sd
mean = 1
sd = 1
mean+10*sd - mean-10*sd
(mean+10*sd) - (mean-10*sd)
((mean+10*sd) - (mean-10*sd))
((mean+10*sd) - (mean-10*sd))*20/100
((mean+10*sd) - (mean-10*sd))/100
norm_density <- function(mean, sd) {
x <- seq(mean-10*sd, mean+10*sd, ((mean+10*sd) - (mean-10*sd))/100)
res <- data.frame(x, dnorm(x, mean, sd))
names(res) <- c("x", "dnorm")
return(res)
}
plot(norm_density(1, 1), type="l")
plot(norm_density(0.1, 0.1), type="l")
norm_density(0.1, 0.1)
norm_density(0.01, 0.01)
norm_density(10, 10)
norm_density <- function(mean, sd) {
x <- seq(mean-10*sd, mean+10*sd, ((mean+10*sd) - (mean-10*sd))/200)
res <- data.frame(x, dnorm(x, mean, sd))
names(res) <- c("x", "dnorm")
return(res)
}
norm_density(10, 10)
plot(norm_density(10, 10))
norm_density(10, 10)
norm_density(10, 10)[,2]
a = norm_density(10, 10)[,2]
head(a)
a
a = norm_density(10, 10)
a
head(a)
sum(a$dnorm)
sum(a$dnorm[a$x <= 0])
a = norm_density(0.1, 0.1)
sum(a$dnorm[a$x <= 0])
sum(a$dnorm)
View(a)
plot(a)
sum(a$dnorm)
a = norm_density(1, 1)
head(a)
sum(a$dnorm)
x
x <- seq(mean-10*sd, mean+10*sd, ((mean+10*sd) - (mean-10*sd))/200)
res <- data.frame(x, dnorm(x, mean, sd))
names(res) <- c("x", "dnorm")
res
sum(res$dnorm)
x
?dnorm
plot(x)
dnorm(x, 1, 1)
sum(dnorm(x, 1, 1))
norm_density <- function(mean, sd) {
x <- seq(mean-10*sd, mean+10*sd, ((mean+10*sd) - (mean-10*sd))/200)
res <- data.frame(x, dnorm(x, mean, sd))
names(res) <- c("x", "dnorm")
res$dnorm <- res$dnorm/sum(res$dnorm)
return(res)
}
res = norm_density(0.1, 0.1)
plot(res)
sum(res$dnorm)
sum(res$dnorm[res$x <= 0])
res2 = norm_density(10, 10)
sum(res2$dnorm)
sum(res2$dnorm[res2$x <= 0])
res2 = norm_density(1, 1)
sum(res2$dnorm[res2$x <= 0])
res2 = norm_density(1, 0.5)
sum(res2$dnorm[res2$x <= 0])
1-0.17
0.136+0.0214
0.136+0.0214+0.0013
getwd()
q()
q()
load(url("http://math.luc.edu/~ebalderama/bayes_resources/data/election_2008_2016.RData"))
q()
library(car)
library(lmtest)
library(tidyverse)
library(lubridate)
#needs(car, lmtest, tidyverse, lubridate, stringr, onls)
#Defie the server : pc or mac
if (Sys.info()['sysname'] == "Darwin") {server <- "/Volumes"} else {server <- "//nyccentral"}
#code_dir <- "C:/Users/julia.liu/Documents/MyWork/Projects/Julia/msmp/R/"
code_dir <- "C:/Users/julia.liu/OneDrive - Omnicom Media Group/Documents/MyWork/Projects/Julia/msmp/R/"
source(paste(code_dir, "Run_Model.R", sep = ""))
source(paste(code_dir, "my_bayes_v2.R", sep = ""))
source(paste(code_dir, "Check_Data.R", sep = ""))
source(paste(code_dir, "Transform.R", sep = ""))
source(paste(code_dir, "Decomp.R", sep = ""))
source(paste(code_dir, "MAPE.R", sep = ""))
source(paste(code_dir, "responsecurve.R", sep = ""))
#source(paste(code_dir, "waterfall.R", sep = ""))
#source(paste(code_dir, "DueToChart.R", sep = ""))
source(paste(code_dir, "unnestr2.0.R", sep = ""))
source(paste(code_dir, "abc.R", sep = ""))
source(paste(code_dir, "abc_onls.R", sep = ""))
source(paste(code_dir, "fitABC.R", sep = ""))
#######  define project directories ##############
# please edit these lines to define the path to the project folder.
ProjectName <-  "sub_model"            # the name of the subfolder that contains the model project
OutDir <- "output"
#RootDirectory <- "C:/Users/julia.liu/Documents/MyWork/Projects/Julia/"   # the parent folder that contains the subfolder ProjectName
RootDirectory <- "C:/Users/julia.liu/OneDrive - Omnicom Media Group/Documents/MyWork/Projects/Julia/mmm_unnest_example/"
ProjectDirectory <- paste(RootDirectory, ProjectName, "/", sep="")   # this is the full path of the project
###################
# setup
###################
# define input file names
ModelDataFile <- paste(ProjectDirectory, ProjectName, "_ModelData.csv", sep="")
ModelSetupFile <- paste(ProjectDirectory, ProjectName, "_ModelSetup.csv", sep="")
ModelSpecFile <- paste(ProjectDirectory, ProjectName, "_Variables.csv", sep="")
ModelFitCurves <- paste(ProjectDirectory, ProjectName, "_Fit_Curves.csv", sep="")
# output file names
output_folder <- paste(ProjectDirectory, OutDir, sep="")
if(!file.exists(output_folder)) {
dir.create(output_folder)
}
CoefficientsFile <- paste(output_folder,  "/", ProjectName, "_Coefficients.csv", sep="")
ActualPredictedFile <- paste(output_folder, "/", ProjectName, "_ActPred.csv", sep="")
DecompFile <- paste(output_folder,  "/", ProjectName, "_Decomp.csv", sep="")
raw_transFile <-  paste(output_folder, "/", ProjectName, "_TransVariables.csv", sep="")
WaterFile <- paste(output_folder,  "/", ProjectName, "_Waterfall.csv", sep="")
spec_coef_vifFile <- paste(output_folder,  "/", ProjectName, "_spec_coef_vif.csv", sep="")
RCFile <- paste(output_folder,"/", ProjectName, "_ResponseCurve.csv", sep="")
kpi_spentFile <- paste(output_folder,"/", ProjectName, "_kpi_spent.csv", sep="")
ModObjectFile <- paste(output_folder, "/", ProjectName, "_ModObj.RData", sep="")
# read input files
x <- read_csv(ModelDataFile, col_types = cols())
Model_Spec <- read_csv(ModelSpecFile, col_types=cols())
Model_Spec <- Model_Spec %>% filter(Include == 1) # use Include to include (1)/exclude (0) variables
# read input files
x <- read_csv(ModelDataFile, col_types = cols())
Model_Spec <- read_csv(ModelSpecFile, col_types=cols())
Model_Spec <- Model_Spec %>% filter(Include == 1) # use Include to include (1)/exclude (0) variables
Model_setup <- read_csv(ModelSetupFile, col_types = cols())
fit_curves <- read_csv(ModelFitCurves, col_types = cols())
# define model object
mod_obj <- list()
mod_obj$ModelForm <- Model_setup$Value[Model_setup$Parameter=="ModelForm"]
mod_obj$Panel <- Model_setup$Value[Model_setup$Parameter=="Panel"]
mod_obj$Time <- Model_setup$Value[Model_setup$Parameter=="Time"]
mod_obj$BeginDate <- mdy(Model_setup$Value[Model_setup$Parameter=="BeginDate"])
mod_obj$EndDate <- mdy(Model_setup$Value[Model_setup$Parameter=="EndDate"])
mod_obj$data <- x
mod_obj$spec <- Model_Spec
mod_obj$fit_curves <- fit_curves
mod_obj$SimStart <- mdy(Model_setup$Value[Model_setup$Parameter=="SimStart"])
mod_obj$SimEnd <- mdy(Model_setup$Value[Model_setup$Parameter=="SimEnd"])
mod_obj$mroi_step <- as.numeric(Model_setup$Value[Model_setup$Parameter == "Mroi"])
#######################################
# data check
#######################################
mod_obj <- Check_Data(mod_obj)
#########################
# variable transformation
#########################
mod_obj <- Transform(mod_obj)
mod_obj$data <- mod_obj$data[mod_obj$data[[mod_obj$Time]] >= mod_obj$BeginDate & mod_obj$data[[mod_obj$Time]] <= mod_obj$EndDate,]
########################
# Run model
########################
print("Run model...")
mod_obj <- Run_Model(obj = mod_obj)
#mod_obj <- Run_Model_Time(obj = mod_obj)
write_csv(mod_obj$Model$coefficients, CoefficientsFile)
write_csv(mod_obj$Model$act_pred, ActualPredictedFile)
write_csv(mod_obj$Model$result_all, spec_coef_vifFile)
mod_obj <- Decomp(obj = mod_obj, incl_spent = F)
write_csv(mod_obj$Decomposition, DecompFile)
# let's save the model object to a RData file. This object will be loaded later at post-model calculation:
# unnest, combine response curves and calculate abc.
save(mod_obj, file=ModObjectFile)
print("All done.")
summary(mod_obj$Model$coefficients)
(mod_obj$Model$coefficients)
getwd()
library(car)
library(lmtest)
library(tidyverse)
library(lubridate)
#needs(car, lmtest, tidyverse, lubridate, stringr, onls)
#Defie the server : pc or mac
if (Sys.info()['sysname'] == "Darwin") {server <- "/Volumes"} else {server <- "//nyccentral"}
#code_dir <- "C:/Users/julia.liu/Documents/MyWork/Projects/Julia/msmp/R/"
code_dir <- "C:/Users/julia.liu/OneDrive - Omnicom Media Group/Documents/MyWork/Projects/Julia/msmp/R/"
source(paste(code_dir, "Run_Model.R", sep = ""))
source(paste(code_dir, "my_bayes_v2.R", sep = ""))
source(paste(code_dir, "Check_Data.R", sep = ""))
source(paste(code_dir, "Transform.R", sep = ""))
source(paste(code_dir, "Decomp.R", sep = ""))
source(paste(code_dir, "MAPE.R", sep = ""))
source(paste(code_dir, "responsecurve.R", sep = ""))
#source(paste(code_dir, "waterfall.R", sep = ""))
#source(paste(code_dir, "DueToChart.R", sep = ""))
source(paste(code_dir, "unnestr2.0.R", sep = ""))
source(paste(code_dir, "abc.R", sep = ""))
source(paste(code_dir, "abc_onls.R", sep = ""))
source(paste(code_dir, "fitABC.R", sep = ""))
ProjectName <-  "main_model"
OutDir <- "output"
RootDirectory <- "C:/Users/julia.liu/OneDrive - Omnicom Media Group/Documents/MyWork/Projects/Julia/mmm_unnest_example/"
ProjectDirectory <- paste(RootDirectory, ProjectName, "/", sep="")   # this is the full path of the project
##### UNNESTING SECTION 1: LOADING MODELS #####
## Load in 4 different environments (one for each model). They will each contain the .Rdata model object within each folder
offtrade <- load_nest(submodel_name = ProjectName, root_dir = RootDirectory)
load_nest
##### UNNESTING SECTION 1: LOADING MODELS #####
## Load in 4 different environments (one for each model). They will each contain the .Rdata model object within each folder
offtrade <- load_nest(submodel_name = ProjectName, root_dir = RootDirectory)
#imagery <- load_nest(submodel_name = "UK_GG_Imagery", root_dir = RootDirectory)
sub_mod <- load_nest(submodel_name = "sub_model", root_dir = RootDirectory)
str(sub_mod)
sub_mod$mod_obj
##### UNNESTING SECTION 3: UNNEST #####
## For parent models, I like to get a total sum of every contribution column. The reason being is this will serve as a QA number every time we unnest. This number
## should not change once all submodels are unnested
main_sum <- sum(main_mod$mod_obj$Decomposition[-1])
sub_sum <- sum(sub_mod$mod_obj$Decomposition[-1])
##### UNNESTING SECTION 1: LOADING MODELS #####
## Load in 4 different environments (one for each model). They will each contain the .Rdata model object within each folder
main_mod <- load_nest(submodel_name = ProjectName, root_dir = RootDirectory)
main_mod$mod_obj
#imagery <- load_nest(submodel_name = "UK_GG_Imagery", root_dir = RootDirectory)
sub_mod <- load_nest(submodel_name = "sub_model", root_dir = RootDirectory)
##### UNNESTING SECTION 3: UNNEST #####
## For parent models, I like to get a total sum of every contribution column. The reason being is this will serve as a QA number every time we unnest. This number
## should not change once all submodels are unnested
main_sum <- sum(main_mod$mod_obj$Decomposition[-1])
sub_sum <- sum(sub_mod$mod_obj$Decomposition[-1])
main_sum
tmp <- unnestr(child = sub_mod$mod_obj, parent = main_mod$mod_obj, submodel_number = 1)
source('~/MyWork/Projects/Julia/mmm_unnest_example/main_model/run_main_model.r')
source('~/MyWork/Projects/Julia/mmm_unnest_example/sub_model/run_sub_model.r')
ProjectName <-  "main_model"
OutDir <- "output"
RootDirectory <- "C:/Users/julia.liu/OneDrive - Omnicom Media Group/Documents/MyWork/Projects/Julia/mmm_unnest_example/"
ProjectDirectory <- paste(RootDirectory, ProjectName, "/", sep="")   # this is the full path of the project
##### UNNESTING SECTION 1: LOADING MODELS #####
## Load in 4 different environments (one for each model). They will each contain the .Rdata model object within each folder
main_mod <- load_nest(submodel_name = ProjectName, root_dir = RootDirectory)
#imagery <- load_nest(submodel_name = "UK_GG_Imagery", root_dir = RootDirectory)
sub_mod <- load_nest(submodel_name = "sub_model", root_dir = RootDirectory)
#sentiment <- load_nest(submodel_name = "US_GreyGoose_sentiment", root_dir = RootDirectory)
#familiarity <- load_nest(submodel_name = "US_GreyGoose_Familiarity", root_dir = RootDirectory)
##### UNNESTING SECTION 3: UNNEST #####
## For parent models, I like to get a total sum of every contribution column. The reason being is this will serve as a QA number every time we unnest. This number
## should not change once all submodels are unnested
main_sum <- sum(main_mod$mod_obj$Decomposition[-1])
sub_sum <- sum(sub_mod$mod_obj$Decomposition[-1])
# Unnest Familiarity into desire and then do a quick QA to make sure desire's contribution total is unchanged (Line 84 should return a TRUE)
desire$mod_obj <- unnestr(child = familiarity$mod_obj, parent = desire$mod_obj, submodel_number = 1)
offtrade$mod_obj <- unnestr(child = sub_mod$mod_obj, parent = main_mod$mod_obj, submodel_number = 1)
View(unnestr)
source('~/MyWork/Projects/Julia/mmm_unnest_example/main_model/run_main_model.r')
source('~/MyWork/Projects/Julia/mmm_unnest_example/sub_model/run_sub_model.r')
##### UNNESTING SECTION 1: LOADING MODELS #####
## Load in 4 different environments (one for each model). They will each contain the .Rdata model object within each folder
main_mod <- load_nest(submodel_name = ProjectName, root_dir = RootDirectory)
#imagery <- load_nest(submodel_name = "UK_GG_Imagery", root_dir = RootDirectory)
sub_mod <- load_nest(submodel_name = "sub_model", root_dir = RootDirectory)
main_mod$mod_obj$Setup$Parameter
##### UNNESTING SECTION 3: UNNEST #####
## For parent models, I like to get a total sum of every contribution column. The reason being is this will serve as a QA number every time we unnest. This number
## should not change once all submodels are unnested
main_sum <- sum(main_mod$mod_obj$Decomposition[-1])
sub_sum <- sum(sub_mod$mod_obj$Decomposition[-1])
# Unnest Familiarity into desire and then do a quick QA to make sure desire's contribution total is unchanged (Line 84 should return a TRUE)
desire$mod_obj <- unnestr(child = familiarity$mod_obj, parent = desire$mod_obj, submodel_number = 1)
tmp <- unnestr(child = sub_mod$mod_obj, parent = main_mod$mod_obj, submodel_number = 1)
main_mod$mod_obj$Setup$Parameter
main_mod$mod_obj$Setup$Value
ProjectName
RootDirectory
ProjectName <-  "main_model"
OutDir <- "output"
RootDirectory <- "C:/Users/julia.liu/OneDrive - Omnicom Media Group/Documents/MyWork/Projects/Julia/mmm_unnest_example/"
ProjectDirectory <- paste(RootDirectory, ProjectName, "/", sep="")   # this is the full path of the project
##### UNNESTING SECTION 1: LOADING MODELS #####
## Load in 4 different environments (one for each model). They will each contain the .Rdata model object within each folder
main_mod <- load_nest(submodel_name = ProjectName, root_dir = RootDirectory)
#imagery <- load_nest(submodel_name = "UK_GG_Imagery", root_dir = RootDirectory)
sub_mod <- load_nest(submodel_name = "sub_model", root_dir = RootDirectory)
if(0) {
##### UNNESTING SECTION 2: PREPARING THE MODELS #####
## We need to look across all of the different models and figure out the right date range to use. For this example, two things need to happen:
## 1.) Since the main model is a monthly model, we need to make sure all submodel decomps are transformed into monthly granularity. This can be done easily
##     with the "monthly.R" function I wrote
## 2.) Once all of the models are monthly, we also need to make sure they all have the same date range. IT WILL NOT WORK IF MODELS HAVE DIFFERENT DATE RANGES. For
##     this example, the date range that works for us is Sept 2015 - Aug 2017
# Convert to monthly and filter to relevant dates (Note Ontrade sales model is already monthly)
offtrade$mod_obj$Decomposition <- offtrade$mod_obj$Decomposition %>%
filter(Week >= "2016-01-04" & Week <= "2018-12-24")
# This step is optional but can help with getting contributions by year for all models for the sunburst chart.
nested_offtrade_cont <- contributions(offtrade$mod_obj,  "2018-01-01", "2018-12-24") %>%
mutate(Model = "Nested_Offtrade")
nested_offtrade_cont_fy17 <- contributions(offtrade$mod_obj, "2017-01-02", "2017-12-25") %>%
mutate(Model = "Nested_Offtrade")
# Convert to monthly and filter to relevant dates
desire$mod_obj$Decomposition <- desire$mod_obj$Decomposition %>%
filter(Week >= "2016-01-04" & Week <= "2018-12-24")
# This step is optional but can help with getting contributions by year for all models for the sunburst chart.
desire_cont <- contributions(desire$mod_obj, "2018-01-01", "2018-12-24") %>%
mutate(Model = "Desire")
desire_cont_fy17 <- contributions(desire$mod_obj,  "2017-01-02", "2017-12-25") %>%
mutate(Model = "Desire")
# Convert to monthly and filter to relevant dates
sentiment$mod_obj$Decomposition <- sentiment$mod_obj$Decomposition %>%
filter(Week >= "2016-01-04" & Week <= "2018-12-24")
# This step is optional but can help with getting contributions by year for all models for the sunburst chart.
sentiment_cont <- contributions(sentiment$mod_obj,  "2018-01-01", "2018-12-24") %>%
mutate(Model = "Sentiment")
sentiment_cont_fy17 <- contributions(sentiment$mod_obj,"2017-01-02", "2017-12-25") %>%
mutate(Model = "Sentiment")
# Convert to monthly and filter to relevant dates
familiarity$mod_obj$Decomposition <- familiarity$mod_obj$Decomposition %>%
filter(Week >= "2016-01-04" & Week <= "2018-12-24")
# This step is optional but can help with getting contributions by year for all models for the sunburst chart.
familiarity_cont <- contributions(familiarity$mod_obj, "2018-01-01", "2018-12-24") %>%
mutate(Model = "Familiarity")
familiarity_cont_fy17 <- contributions(familiarity$mod_obj,"2017-01-02", "2017-12-25") %>%
mutate(Model = "Familiarity")
}
tmp <- unnestr(child = sub_mod$mod_obj, parent = main_mod$mod_obj, submodel_number = 1)
tmp
q()
source('~/MyWork/Projects/Julia/mmm_unnest_example/main_model/run_main_model.r')
mod_obj$Decomposition[1,]
source('~/MyWork/Projects/Julia/mmm_unnest_example/sub_model/run_sub_model.r')
mod_obj$Decomposition[1,]
source('~/MyWork/Projects/Julia/mmm_unnest_example/main_model/run_unnesting.R')
main_mod$mod_obj$Decomposition
sum(main_mod$mod_obj$Decomposition$sales)
sum(mod_obj$Decomposition$sales)
(mod_obj$Decomposition$sales)
(mod_obj$Decomposition)
sum(main_mod$mod_obj$Decomposition$d_TV_GRPs_t)/sum(main_mod$mod_obj$Decomposition$sales)
sum(main_mod$mod_obj$Decomposition$d_DigitalDisplay_Impressions_t)/sum(main_mod$mod_obj$Decomposition$sales)
source('~/MyWork/Projects/Julia/mmm_unnest_example/main_model/run_main_model.r')
sum(mod_obj$Decomposition$d_TV_GRPs_t)/sum(mod_obj$Decomposition$sales)
sum(mod_obj$Decomposition$d_DigitalDisplay_Impressions_t)/sum(mod_obj$Decomposition$sales)
q()
q()
q()
setwd("an_ms_modelplatform/")

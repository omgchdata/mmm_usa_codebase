geom_line() +
geom_hline(aes(yintercept = supr), linetype = 2, color = "lightblue") +
geom_hline(aes(yintercept = slwr), linetype = 2, color = "lightblue") +
geom_point(aes(yearmonthday, diff, alpha = salph, color = factor(salph)), shape = 17, size = 3) +
scale_color_manual(values = c("black", "red")) +
theme_minimal() +
theme(legend.position = "none") +
labs(x = "Date", y = "Standardized DoD Diff", title = "Extreme DoD Count Differences",
subtitle = as.character(unique(data$tracker_name)))
}
alarming_ids =
gDT %>%
group_by(tracker_id, tracker_name) %>%
mutate(nobs = n()) %>%
filter(yearmonthday == max(yearmonthday),
clr != "normal" | sclr != "normal",
nobs > 30) %>%
pull(tracker_id) %>%
unique()
alarming_ids
gDT
head(gDT)
alarming_ids
q()
head(DT)
impression_count <- function(df, var_path="str_path", var_conv = "converted",
var_null ="no_conversion", sep=">") {
if(length(grep(var_null, names(df))) == 0) {
df[[var_null]] = 0
}
channels <- unique(unlist(str_split(df[[var_path]], pattern = sep)))
res <- data.frame(matrix(nrow=length(channels), ncol=2))
names(res) <- c("channel_name", "impressions")
res$channel_name <- channels
for (i in 1:length(channels)) {
res$impressions[res$channel_name == channels[i]] <-
sum(str_count(df[[var_path]], channels[i]) * (df[[var_conv]]+df[[var_null]]))
}
return(res)
}
remove_adjcanet_rep = function(path){
split_path = str_split(path, " > ", simplify = TRUE)
split_path = c(split_path, "terminal")
rem_vec = vector(mode = "numeric")
for(i in 1:(length(split_path) - 1)){
if(split_path[i] == split_path[i + 1]){
rem_vec = c(rem_vec, i + 1)
}
}
if(length(rem_vec) > 0){
split_path = split_path[-rem_vec]
split_path = split_path[-length(split_path)] # remove terminal node
split_path = split_path[-length(split_path)] # remove the kba
new_path = str_c(split_path, collapse = " > ")
return(new_path)
}else{
path = path[-length(path)]
return(path)
}
}
split_mult_kba = function(data){
first_kba = min(which(data$event_type == "kba_event"))
last_kba = max(which(data$event_type == "kba_event"))
kba_index = which(data$event_type == "kba_event")
kba_index_lag = lag(which(data$event_type == "kba_event"), default = first_kba)
split_points = kba_index - kba_index_lag >= 2
x = c(1, kba_index_lag[split_points] + 1)
y = c(kba_index_lag[split_points], last_kba)
split_index = map2(x, y, ~seq(.x, .y))
map(split_index, ~data[.x,])
}
build_edf = function(path){
vpath = unlist(str_split(path, " > "))
if(length(vpath) == 1){
x = c("(start)", vpath)
y = c(vpath, "(convert)")
edf = data.frame(from = x, to = y)
}else if(length(vpath) > 1){
x = c("(start)", vpath[1:(length(vpath))])
y = c(vpath, "(convert)")
edf = data.frame(from = x, to = y)
}
return(edf)
}
con_bds = DBI::dbConnect(bigquery(), project = "athena-sandbox",
dataset = "sandbox_bds")
DT = tbl(con_bds, "rogue_tv_kba_cohort2_full") %>% collect()
DT$event_name[is.na(DT$event_name)] = "NA"
DT =
DT %>%
mutate(event_time = round_date(event_time, unit = "hour")) %>%
group_by(viant_id, event_time, event_name, event_type, event_id, car) %>%
summarise(frequency = n()) %>%
arrange(viant_id, event_time) %>%
group_by(viant_id) %>%
nest() %>%
mutate(nkba = map_int(data, ~sum(.x$event_type == "kba_event"))) %>%
arrange(-nkba) %>%
filter(nkba > 0)
DT
path_list = map(DT$data, ~split_mult_kba(.x)) %>% flatten() %>% keep(~nrow(.x) > 1)
DT$data[[2]]
paths = map_chr(path_list, ~str_c(.x$event_name, collapse = " > "))
paths_length = map(paths, ~length(str_split(.x, " > ", simplify = TRUE)))
head(DT)
head(path_list)
length(path_list)
DT = tbl(con_bds, "rogue_tv_kba_cohort2_full") %>% collect()
head(DT)
DT = DT[order(DT$viant_id, DT$event_time),]
head(DT)
view(DT)
view(DT[DT$viant_id == "eb030125df8f5eee56d93d385ce5288688c9",])
view(DT[DT$viant_id == "eb038ec613c4c461e7b3e758b903d1cde5f0",])
view(DT[DT$viant_id == "eb03450d833dd581b217e38ab31f64dfda9f",])
view(DT[DT$viant_id == "eb03450d833dd581b217e38ab31f64dfda9f",])
abc <- function(x, a, b, c) {
d <- a/(1+b*x^c)
return(d)
}
curve(abc(x, 100, 100, -1), 0, 100)
curve(abc(x, 100, 100, -2), 0, 100)
curve(abc(x, 100, 100, -3), 0, 100)
curve(abc(x, 100, 100, -2), 0, 10)
curve(abc(x, 100, 100, -2), 0, 30)
curve(abc(x, 100, 200, -2), 0, 30, add=t, col="red")
curve(abc(x, 100, 200, -2), 0, 30, add=T, col="red")
curve(abc(x, 100, 100, -2), 0, 30)
curve(abc(x, 100, 200, -2), 0, 30, add=T, col="red")
curve(abc(x, 100, 100, -1), 0, 30)
curve(abc(x, 100, 100, -2), 0, 30)
curve(abc(x, 100, 200, -2), 0, 30, add=T, col="red")
curve(abc(x, 100, 100, -2), 0, 30, add=T, col="red")
curve(abc(x, 100, 100, -2), 0, 30)
curve(abc(x, 100, 100, -2), 0, 30, add=T, col="red")
curve(abc(x, 100, 100, -2), 0, 30)
curve(abc(x, 100, 200, -2), 0, 30, add=T, col="red")
curve(abc(x, 100, 100, -1.5), 0, 30, add=T, col="blue")
curve(abc(x, 100, 100, -2), 0, 1000000)
?line
?abline
abline(100,0, col="green")
curve(abc(x, 100, 100, -1.5), 0, 1000000, col="blue")
curve(abc(x, 100, 100, -2), 0, 1000000)
curve(abc(x, 100, 100, -2), 0, 10000)
curve(abc(x, 100, 100, -2), 0, 1000)
curve(abc(x, 100, 200, -2), 0, 1000, add=T, col="blue")
curve(abc(x, 100, 200, -1.5), 0, 1000, add=T, col="green")
abline(100,0, col="red")
curve(abc(x, 100, 800, -2), 0, 1000, add=T, col="blue")
curve(dabc(x, 100, 800, -2), 0, 1000, add=T, col="blue")
############################
# first derivative of ABC function
############################
dabc <- function(x, a, b, c) {
d <- (-a*b*c*x^(c-1))/((1+b*x^c)^2)
return(d)
}
curve(dabc(x, 100, 800, -2), 0, 1000, add=T, col="blue")
curve(dabc(x, 100, 800, -2), 0, 100, add=T, col="blue")
curve(dabc(x, 100, 800, -2), 0, 100,  col="blue")
curve(dabc(x, 100, 800, -1.5), 0, 100,  col="blue")
curve(abc(x, 100, 800, -1.5), 0, 100,  col="blue", add=T)
curve(abc(x, 100, 800, -1.5), 0, 100,  col="blue")
curve(abc(x, 100, 300, -1.5), 0, 100,  col="blue", add=T)
curve(abc(x, 100, 300, -1.5), 0, 100,  col="blue")
curve(abc(x, 100, 300, -1.5), 0, 300,  col="blue")
curve(dabc(x, 100, 300, -1.5), 0, 300,  col="blue", add=T)
curve(dabc(x, 100, 300, -1.5), 0, 300,  col="blue")
curve(abc(x, 100, 300, -1.5), 0, 300,  col="blue")
curve(abc(x, 100, 100, -2), 0, 300,  col="blue")
curve(abc(x, 100, 100, -2), 0, 200,  col="blue")
curve(abc(x, 100, 100, -2), 0, 100,  col="blue")
abline(0,100)
abline(100,0)
curve(dabc(x, 100, 100, -2), 0, 100,  col="blue", add=T)
curve(dabc(x, 100, 100, -2), 0, 100,  col="blue")
?jitter
x
x = seq(0, 100)
y = abc(x, 100, 100, -2)
plot(x, y)
plot(x, jitter(y))
jitter(rep(0, 7))
jitter(rep(0, 7), 2)
jitter(rep(0, 7), 10)
plot(x, jitter(y, 10))
plot(x, jitter(y, 100))
plot(x, jitter(y, 400))
plot(x, jitter(y, 600))
abc_onls = function(xaxis, yaxis) {
abc_mod <- onls(yaxis ~ a/(1+b* xaxis^c), start=list(a=max(yaxis),b=max(xaxis),c=-0.5),
control = list(maxiter=1024, maxfev=1024),
lower = c(0,0,-Inf), upper=c(Inf, Inf, -0.1))
res <- data.frame(t(coef(abc_mod)))
return(res)
}
abc_onls(x, jigger(y, 600))
install.packages("onls")
abc_onls(x, jigger(y, 600))
library(onls)
abc_onls(x, jigger(y, 600))
abc_onls(x, jitter(y, 600))
abc_onls(x, jitter(y, 300))
?nls
x = xaxis
xaxis = x
yaxis = jitter(y, 300)
abc_mod <- nls(yaxis ~ a/(1+b* xaxis^c), start=list(a=max(yaxis),b=max(xaxis),c=-0.5),
control = list(maxiter=1024, maxfev=1024),
lower = c(0,0,-Inf), upper=c(Inf, Inf, -0.1))
yaxis = jitter(y)
abc_mod <- nls(yaxis ~ a/(1+b* xaxis^c), start=list(a=max(yaxis),b=max(xaxis),c=-0.5),
control = list(maxiter=1024, maxfev=1024),
lower = c(0,0,-Inf), upper=c(Inf, Inf, -0.1))
abc_mod <- nls(yaxis ~ a/(1+b* xaxis^c), start=list(a=max(yaxis),b=max(xaxis),c=-0.5),
lower = c(0,0,-Inf), upper=c(Inf, Inf, -0.1))
abc_mod <- nls(yaxis ~ a/(1+b* xaxis^c), start=list(a=max(yaxis),b=max(xaxis),c=-2),
lower = c(0,0,-Inf), upper=c(Inf, Inf, -0.1))
abc_mod
abc_mod <- nls(yaxis ~ a/(1+b* xaxis^c), start=list(a=max(yaxis),b=max(xaxis),c=-1.5),
lower = c(0,0,-Inf), upper=c(Inf, Inf, -0.1))
abc_mod
abc_mod <- nls(yaxis ~ a/(1+b* xaxis^c), start=list(a=max(yaxis),b=max(xaxis),c=-1),
lower = c(0,0,-Inf), upper=c(Inf, Inf, -0.1))
abc_mod
yaxis = jitter(y, 300)
abc_mod <- nls(yaxis ~ a/(1+b* xaxis^c), start=list(a=max(yaxis),b=max(xaxis),c=-1),
lower = c(0,0,-Inf), upper=c(Inf, Inf, -0.1))
abc_mod
abc_mod <- onls(yaxis ~ a/(1+b* xaxis^c), start=list(a=max(yaxis),b=max(xaxis),c=-1),
lower = c(0,0,-Inf), upper=c(Inf, Inf, -0.1))
abc_mod
abc_mod <- onls(yaxis ~ a/(1+b* xaxis^c), start=list(a=max(yaxis),b=max(xaxis),c=-1),
lower = c(0,0,-Inf), upper=c(Inf, Inf, -0.1))
abc_mod
abc_mod <- onls(yaxis ~ a/(1+b* xaxis^c), start=list(a=max(yaxis),b=max(xaxis),c=-2),
lower = c(0,0,-Inf), upper=c(Inf, Inf, -0.1))
abc_mod
abc_mod <- onls(yaxis ~ a/(1+b* xaxis^c), start=list(a=max(yaxis),b=max(xaxis),c=-0.5),
control = list(maxiter=1024, maxfev=1024),
lower = c(0,0,-Inf), upper=c(Inf, Inf, -0.1))
abc_mod
plot(abc_onls)
plot(xaxis)
plot(xaxis, yaxis)
yaxis = y
plot(xaxis, yaxis)
abc_mod <- onls(yaxis ~ a/(1+b* xaxis^c), start=list(a=max(yaxis),b=max(xaxis),c=-0.5),
control = list(maxiter=1024, maxfev=1024),
lower = c(0,0,-Inf), upper=c(Inf, Inf, -0.1))
abc_mod
plot(abc_mod)
abc_mod <- nls(yaxis ~ a/(1+b* xaxis^c), start=list(a=max(yaxis),b=max(xaxis),c=-0.5),
#  control = list(maxiter=1024, maxfev=1024),
lower = c(0,0,-Inf), upper=c(Inf, Inf, -0.1))
curve(abc(x, 100, 100, -2), 0, 100,  col="blue")
curve(abc(x, 100, 100, -2), 0, 100,  col="black")
curve(abc(x, 100, 200, -2), 0, 100,  col="blue", add=T)
curve(abc(x, 100, 100, -1.5), 0, 100,  col="green", add=T)
curve(abc(x, 100, 100, 1), 0, 100,  col="black")
curve(abc(x, 100, 100, 0.1), 0, 100,  col="black")
curve(abc(x, 100, 100, 0), 0, 100,  col="black")
curve(abc(x, 100, 100, -0.01), 0, 100,  col="black")
curve(abc(x, 100, 100, -2), 0, 100,  col="black")
curve(abc(x, 100, 300, -2), 0, 100,  col="blue", add=T)
curve(abc(x, 100, 100, -1.5), 0, 100,  col="green", add=T)
library(plotly)
plotly(curve)
abline(100, 0)
abline(100, 0, col="red")
?legent
?legend
legend(60, 70, "(100, 100, -2)")
legend(60, 70, "(100, 100, -2)", adj=0.2)
legend(60, 70, "(100, 100, -2)", adj=2)
curve(abc(x, 100, 100, -2), 0, 100,  col="black")
curve(abc(x, 100, 300, -2), 0, 100,  col="blue", add=T)
curve(abc(x, 100, 100, -1.5), 0, 100,  col="green", add=T)
abline(100, 0, col="red")
legend(50, 70, "(100, 100, -2)", pch=20)
legend(50, 70, "(100, 100, -2)", pch=20, lty=1)
legend(50, 70, "(100, 100, -2)", pch=20, lty=1, col="black")
legend(50, 50, "(100, 200, -2)",  lty=1, col="blu")
legend(50, 50, "(100, 200, -2)",  lty=1, col="blue")
legend(50, 50, "(100, 200, -2)",  lty=1, col="blue", text.col = par("blue"))
legend(50, 50, "(100, 200, -2)",  lty=1, col="blue", text.col = par("col"))
op <- par(mfrow = c(2, 2), mar = rep(2.1, 4))
c6 <- terrain.colors(10)[1:6]
for(i in 1:4) {
plot(1, type = "n", axes = FALSE, ann = FALSE); title(paste("text.font =",i))
legend("top", legend = LETTERS[1:6], col = c6,
ncol = 2, cex = 2, lwd = 3, text.font = i, text.col = c6)
}
par(op)
curve(abc(x, 100, 100, -2), 0, 100,  col="black")
curve(abc(x, 100, 300, -2), 0, 100,  col="blue", add=T)
curve(abc(x, 100, 100, -1.5), 0, 100,  col="green", add=T)
abline(100, 0, col="red")
legend(50, 50, "(100, 200, -2)",  lty=1, col="blue", text.col = par("col"))
curve(dabc(x, 100, 100, -2), 0, 100,  col="black")
curve(dabc(x, 100, 300, -2), 0, 100,  col="blue", add=T)
curve(dabc(x, 100, 100, -1.5), 0, 100,  col="green", add=T)
curve(abc(x, 100, 100, -2), 0, 100,  col = "black")
curve(abc(x, 100, 300, -2), 0, 100,  col = "blue", add = TRUE)
curve(abc(x, 100, 100, -1.5), 0, 100,  col = "green", add = TRUE)
abline(100, 0, col = "red")
legend("bottomright", legend = c("a = 100 / b = 100 /c = -2",
"a = 100 / b = 300 /c = -2",
"a = 100 / b = 100 /c = -1.5",
"100"),
col = c("black", "blue", "green", "red"), lty = c(1, 1, 1, 1))
curve(abc(x, 100, 100, -2), 0, 100,  col = "black")
curve(abc(x, 100, 300, -2), 0, 100,  col = "blue", add = TRUE)
curve(abc(x, 100, 100, -1.5), 0, 100,  col = "green", add = TRUE)
abline(100, 0, col = "red")
legend("bottomright", legend = c("(100, 100, -2)",
"(100, 300, -2)",
"(100, 100, c = -1.5"),
col = c("black", "blue", "green"), lty = c(1, 1, 1))
curve(abc(x, 100, 100, -2), 0, 100,  col = "black")
curve(abc(x, 100, 300, -2), 0, 100,  col = "blue", add = TRUE)
curve(abc(x, 100, 100, -1.5), 0, 100,  col = "green", add = TRUE)
abline(100, 0, col = "red")
legend("bottomright", legend = c("(100, 100, -2)",
"(100, 300, -2)",
"(100, 100, -1.5"),
col = c("black", "blue", "green"), lty = c(1, 1, 1))
curve(abc(x, 100, 100, -2), 0, 100,  col = "black")
curve(abc(x, 100, 300, -2), 0, 100,  col = "blue", add = TRUE)
curve(abc(x, 100, 100, -1.5), 0, 100,  col = "green", add = TRUE)
abline(100, 0, col = "red")
legend("bottomright", legend = c("(100, 100, -2)",
"(100, 300, -2)",
"(100, 100, -1.5)"),
col = c("black", "blue", "green"), lty = c(1, 1, 1))
curve(abc(x, 100, 100, -2), 0, 100,  col = "black")
curve(abc(x, 100, 300, -2), 0, 100,  col = "blue", add = TRUE)
curve(abc(x, 100, 100, -1.5), 0, 100,  col = "green", add = TRUE)
abline(100, 0, col = "red")
legend("bottomright", legend = c("(100, 100, -2)",
"(100, 300, -2)",
"(100, 100, -1.5)"),
col = c("black", "blue", "green"), lty = c(1, 1, 1), cex = 0.5)
curve(abc(x, 100, 100, -2), 0, 100,  col = "black")
curve(abc(x, 100, 300, -2), 0, 100,  col = "blue", add = TRUE)
curve(abc(x, 100, 100, -1.5), 0, 100,  col = "green", add = TRUE)
abline(100, 0, col = "red")
legend("bottomright", legend = c("(100, 100, -2)",
"(100, 300, -2)",
"(100, 100, -1.5)"),
col = c("black", "blue", "green"), lty = c(1, 1, 1), cex = 0.8)
curve(dabc(x, 100, 100, -2), 0, 100,  col = "black")
curve(dabc(x, 100, 300, -2), 0, 100,  col = "blue", add = TRUE)
curve(dabc(x, 100, 100, -1.5), 0, 100,  col = "green", add = TRUE)
legend("bottomright", legend = c("(100, 100, -2)",
"(100, 300, -2)",
"(100, 100, -1.5)"),
col = c("black", "blue", "green"), lty = c(1, 1, 1))
legend("upperright", legend = c("(100, 100, -2)",
"(100, 300, -2)",
"(100, 100, -1.5)"),
col = c("black", "blue", "green"), lty = c(1, 1, 1))
curve(dabc(x, 100, 100, -2), 0, 100,  col = "black")
curve(dabc(x, 100, 300, -2), 0, 100,  col = "blue", add = TRUE)
curve(dabc(x, 100, 100, -1.5), 0, 100,  col = "green", add = TRUE)
legend("topright", legend = c("(100, 100, -2)",
"(100, 300, -2)",
"(100, 100, -1.5)"),
col = c("black", "blue", "green"), lty = c(1, 1, 1))
?curve
curve(dabc(x, 100, 100, -2), 0, 100,  col = "black", xlab = "x", ylab="abc function")
curve(abc(x, 100, 100, -2), 0, 100,  col = "black", xlab = "x", ylab="abc function")
curve(abc(x, 100, 300, -2), 0, 100,  col = "blue", add = TRUE)
curve(abc(x, 100, 100, -1.5), 0, 100,  col = "green", add = TRUE)
abline(100, 0, col = "red")
legend("bottomright", legend = c("(100, 100, -2)",
"(100, 300, -2)",
"(100, 100, -1.5)"),
col = c("black", "blue", "green"), lty = c(1, 1, 1))
q()
#####################
# ABC function
#####################
abc <- function(x, a, b, c) {
d <- a/(1+b*x^c)
return(d)
}
############################
# first derivative of ABC function
############################
dabc <- function(x, a, b, c) {
d <- (-a*b*c*x^(c-1))/((1+b*x^c)^2)
return(d)
}
curve(abc(x, 100, 100, -2), 0, 100,  col = "black", xlab = "x", ylab="abc function")
curve(abc(x, 100, 300, -2), 0, 100,  col = "blue", add = TRUE)
curve(abc(x, 100, 100, -1.5), 0, 100,  col = "green", add = TRUE)
abline(100, 0, col = "red")
legend("bottomright", legend = c("(100, 100, -2)",
"(100, 300, -2)",
"(100, 100, -1.5)"),
col = c("black", "blue", "green"), lty = c(1, 1, 1))
curve(abc(x, 100, 100, -2), 0, 100,  col = "black", xlab = "x", ylab="")
curve(abc(x, 100, 300, -2), 0, 100,  col = "blue", add = TRUE)
curve(abc(x, 100, 100, -1.5), 0, 100,  col = "green", add = TRUE)
abline(100, 0, col = "red")
legend("bottomright", legend = c("(100, 100, -2)",
"(100, 300, -2)",
"(100, 100, -1.5)"),
col = c("black", "blue", "green"), lty = c(1, 1, 1))
curve(abc(x, 100, 100, -2), 0, 100,  col = "black", xlab = "x", ylab="", title="abc")
curve(abc(x, 100, 300, -2), 0, 100,  col = "blue", add = TRUE)
curve(abc(x, 100, 100, -1.5), 0, 100,  col = "green", add = TRUE)
abline(100, 0, col = "red")
legend("bottomright", legend = c("(100, 100, -2)",
"(100, 300, -2)",
"(100, 100, -1.5)"),
col = c("black", "blue", "green"), lty = c(1, 1, 1))
curve(abc(x, 100, 100, -2), 0, 100,  col = "black", xlab = "x", ylab="")
curve(abc(x, 100, 300, -2), 0, 100,  col = "blue", add = TRUE)
curve(abc(x, 100, 100, -1.5), 0, 100,  col = "green", add = TRUE)
abline(100, 0, col = "red")
legend("bottomright", legend = c("(100, 100, -2)",
"(100, 300, -2)",
"(100, 100, -1.5)"),
col = c("black", "blue", "green"), lty = c(1, 1, 1))
curve(dabc(x, 100, 100, -2), 0, 100,  col = "black", xlab="x", ylab="")
curve(dabc(x, 100, 300, -2), 0, 100,  col = "blue", add = TRUE)
curve(dabc(x, 100, 100, -1.5), 0, 100,  col = "green", add = TRUE)
legend("topright", legend = c("(100, 100, -2)",
"(100, 300, -2)",
"(100, 100, -1.5)"),
col = c("black", "blue", "green"), lty = c(1, 1, 1))
curve(abc(x, 100, 100, -2), 0, 100,  col = "black", xlab = "x", ylab="")
curve(abc(x, 100, 300, -2), 0, 100,  col = "blue", add = TRUE)
curve(abc(x, 100, 100, -1.5), 0, 100,  col = "green", add = TRUE)
abline(100, 0, col = "red")
legend("bottomright", legend = c("(100, 100, -2)",
"(100, 300, -2)",
"(100, 100, -1.5)"),
col = c("black", "blue", "green"), lty = c(1, 1, 1))
curve(dabc(x, 100, 100, -2), 0, 100,  col = "black", xlab="x", ylab="")
curve(dabc(x, 100, 300, -2), 0, 100,  col = "blue", add = TRUE)
curve(dabc(x, 100, 100, -1.5), 0, 100,  col = "green", add = TRUE)
legend("topright", legend = c("(100, 100, -2)",
"(100, 300, -2)",
"(100, 100, -1.5)"),
col = c("black", "blue", "green"), lty = c(1, 1, 1))
curve(abc(x, 100, 100, -2), 0, 100,  col = "black", xlab = "x", ylab="")
curve(abc(x, 100, 300, -2), 0, 100,  col = "blue", add = TRUE)
curve(abc(x, 100, 100, -1.5), 0, 100,  col = "green", add = TRUE)
abline(100, 0, col = "red")
legend("bottomright", legend = c("(100, 100, -2)",
"(100, 300, -2)",
"(100, 100, -1.5)"),
col = c("black", "blue", "green"), lty = c(1, 1, 1))
x
getwd()
q()
q()
s_curve <- function(x, a, c, d) {
d <- a*(1 - exp(-c*x^d))
}
curve(s_curve(x, 100, -1, 100), 0, 100)
curve(s_curve(x, 100, 1, 100), 0, 100)
curve(s_curve(x, 100, 100, 100), 0, 100)
curve(s_curve(x, 100, 100, 1), 0, 100)
curve(s_curve(x, 100, 100, 0.1), 0, 100)
curve(s_curve(x, 100, 100, 0.01), 0, 100)
curve(s_curve(x, 100, 100, 0.0001), 0, 100)
curve(s_curve(x, 100, 100, 0.0001), 0, 10)
curve(s_curve(x, 100, 100, -0.0001), 0, 10)
curve(s_curve(x, 100, 100, 0.0000001), 0, 10)
curve(s_curve(x, 100, 100, 0.0000000001), 0, 10)
curve(s_curve(x, 100, 100, 1000), 0, 10)
curve(s_curve(x, 100, 100, 10), 0, 10)
curve(s_curve(x, 100, 100, 100), 0, 10)
curve(s_curve(x, 100, 100, 2), 0, 10)
curve(s_curve(x, 100, 100, 1), 0, 10)
curve(s_curve(x, 100, 100, 10), 0, 10)
curve(s_curve(x, 100, 10, 10), 0, 10)
q*()
q()
source('~/MyWork/Projects/CPIP/predprice/run_predprice.r')
q()
install.packages("randomForest")
library(randomForest)
data1 <- read.csv(file.choose(), header = TRUE)
data1 <- read.csv(file.choose(), header = TRUE)
head(data1)
data1 <- read.csv(file.choose(), header = TRUE)
head(data1)
read.csv("processed.cleveland.data", header=F)
read.csv(file.choose(), header=F)
q()
38/5
29/4
30/4
17/3
26/7
16/3
24/6
getwd()
setwd("Projects/CPIP")
setwd("predprice/")
setwd("../")
setwd("optimizer_routines/"_
setwd("optimizer_routines/")
getwd()
setwd(../)
q()
